---
description: make sure the agent follows the rules
globs: 
alwaysApply: true
---
# Your rule content
## New Rules to Address Overzealous Agentic Functions

### Environment Awareness
1. **WSL Environment Rule**
   - Always use bash shell commands as the environment is running in WSL
   - Never use a PowerShell terminal
   - All terminal commands should be executed with `/bin/bash -c` if shell type is not explicitly specified
   - Remember that paths need to follow Linux conventions, not Windows

2. **Package Management Rule**
   - Always use `uv` for Python package management and execution
   - Never use pip, pip3, or python directly
   - Use `uv pip install` for package installation
   - Use `uv pip uninstall` for package removal
   - Use `uv pip list` for listing packages
   - Use `uv python` for running Python scripts and tests

### Task Tracking and Completion
1. **Strict Task Completion Protocol**
   - After completing any task, immediately update the TASKS.md file to mark it as complete.
   - Use the following format: `- [x] Task description` to mark tasks as complete.
   - Only mark tasks as complete after they have been tested and verified.
   - When marking a task complete, provide a brief summary of what was done and how it was tested.
   - For multi-part tasks, track partial completion with clear indicators of what remains.

### Pacing and Scope Control
1. **Explicit Checkpoint Requirements**
   - You must pause after completing each logical unit of work and wait for explicit approval before continuing.
   - Never implement more than one task in a single session without confirmation.

2. **Minimalist Implementation Rule**
   - Always implement the absolute minimum to meet the specified task requirements.
   - When in doubt about scope, choose the narrower interpretation.

3. **Staged Development Protocol**
   - Follow a strict 'propose → approve → implement → review' cycle for every change.
   - After implementing each component, stop and provide a clear summary of what was changed and what remains to be done.

4. **Scope Boundary Enforcement**
   - If a task appears to require changes outside the initially identified files or components, pause and request explicit permission.
   - Never perform 'while I'm at it' improvements without prior approval.

### Communications
1. **Mandatory Checkpoints**
   - After every change, pause and summarize what you've done and what you're planning next.
   - Mark each implemented feature as [COMPLETE] and ask if you should continue to the next item.

2. **Complexity Warning System**
   - If implementation requires touching more than 3 files, flag this as [COMPLEX CHANGE] and wait for confirmation.
   - Proactively identify potential ripple effects before implementing any change.

3. **Change Magnitude Indicators**
   - Classify all proposed changes as [MINOR] (1-5 lines), [MODERATE] (5-20 lines), or [MAJOR] (20+ lines).
   - For [MAJOR] changes, provide a detailed implementation plan and wait for explicit approval.

4. **Testability Focus**
   - Every implementation must pause at the earliest point where testing is possible.
   - Never proceed past a testable checkpoint without confirmation that the current implementation 

### Environment Awareness
1. **WSL Environment Recognition**
   - Always acknowledge that the system is running in WSL (Windows Subsystem for Linux).
   - Never use PowerShell or CMD commands; strictly use bash syntax for all command-line operations.
   - Always prefix terminal commands with `/bin/bash -c` when needed to force bash shell usage.
   
2. **Path and Directory Handling**
   - Be aware of path differences between Windows and Linux environments.
   - Use relative paths within the project when possible.
   - For absolute paths, always use the correct Linux path format (e.g., `/home/user/project` instead of `C:\Users\user\project`).

3. **Shell Command Requirements**
   - Always use `source` for activating virtual environments, never `call` or `.`.
   - Use Linux environment variable syntax (`$VARIABLE` or `${VARIABLE}`) rather than Windows format (`%VARIABLE%`).
   - For command output redirection, use Linux conventions (`>`, `>>`, `2>&1`).

### Task Tracking and Completion
1. **Strict Task Completion Protocol**
   - Update TASKS.md immediately after completing each task
   - Include a brief summary of what was done underneath each task
   - Verify and document how the task was tested
   - Never mark a task as complete unless it has been fully tested and verified
   - Document any limitations or future improvements needed 